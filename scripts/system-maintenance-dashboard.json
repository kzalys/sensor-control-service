{
  "dashboard": {
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": "-- Grafana --",
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "gnetId": null,
    "graphTooltip": 0,
    "links": [],
    "panels": [
      {
        "datasource": null,
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": []
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 0,
          "y": 0
        },
        "id": 4,
        "options": {
          "colorMode": "value",
          "graphMode": "none",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.2",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"internal_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"http_api_requests_total\" and r[\"method\"] == \"POST\" and r[\"path\"] == \"/api/v2/write\" and r[\"status\"] == \"2XX\")\n  |> derivative(unit: 1s)\n  |> last()\n  ",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Current metric writes per second",
        "type": "stat"
      },
      {
        "datasource": null,
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {},
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": []
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 7,
          "w": 4,
          "x": 4,
          "y": 0
        },
        "id": 15,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "text": {},
          "textMode": "auto"
        },
        "pluginVersion": "7.4.2",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"iot\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"sensor_status\")\n  |> group(columns: [\"sensor_group\"])\n  |> top(n:1, columns: [\"_time\"])\n  |> unique(column: \"sensor_group\")\n  |> keep(columns: [\"sensor_group\"])\n",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "timeFrom": null,
        "timeShift": null,
        "title": "Active Sensors",
        "transformations": [
          {
            "id": "labelsToFields",
            "options": {}
          },
          {
            "id": "reduce",
            "options": {
              "reducers": [
                "distinctCount"
              ]
            }
          }
        ],
        "type": "stat"
      },
      {
        "collapsed": false,
        "datasource": null,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 7
        },
        "id": 14,
        "panels": [],
        "title": "",
        "type": "row"
      },
      {
        "alert": {
          "alertRuleTags": {},
          "conditions": [
            {
              "evaluator": {
                "params": [
                  1.5
                ],
                "type": "gt"
              },
              "operator": {
                "type": "and"
              },
              "query": {
                "params": [
                  "A",
                  "1m",
                  "now"
                ]
              },
              "reducer": {
                "params": [],
                "type": "avg"
              },
              "type": "query"
            }
          ],
          "executionErrorState": "alerting",
          "for": "30s",
          "frequency": "10s",
          "handler": 1,
          "message": "",
          "name": "Metric writes per second alert",
          "noDataState": "no_data",
          "notifications": [
            {
              "uid": "P5fjeSwMk"
            }
          ]
        },
        "aliasColors": {},
        "bars": false,
        "dashLength": 10,
        "dashes": false,
        "datasource": null,
        "fieldConfig": {
          "defaults": {
            "custom": {}
          },
          "overrides": []
        },
        "fill": 1,
        "fillGradient": 0,
        "gridPos": {
          "h": 11,
          "w": 12,
          "x": 0,
          "y": 8
        },
        "hiddenSeries": false,
        "id": 2,
        "legend": {
          "avg": false,
          "current": false,
          "max": false,
          "min": false,
          "show": false,
          "total": false,
          "values": false
        },
        "lines": true,
        "linewidth": 1,
        "nullPointMode": "null",
        "options": {
          "alertThreshold": true
        },
        "percentage": false,
        "pluginVersion": "7.4.2",
        "pointradius": 2,
        "points": false,
        "renderer": "flot",
        "seriesOverrides": [],
        "spaceLength": 10,
        "stack": false,
        "steppedLine": false,
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "from(bucket: \"internal_metrics\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"http_api_requests_total\")\n  |> filter(fn: (r) => r[\"method\"] == \"POST\")\n  |> filter(fn: (r) => r[\"path\"] == \"/api/v2/write\")\n  |> filter(fn: (r) => r[\"status\"] == \"2XX\")\n  |> keep(columns: [\"path\", \"_time\", \"_value\"])\n  |> derivative(unit: 1s)",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "thresholds": [
          {
            "colorMode": "critical",
            "fill": true,
            "line": true,
            "op": "gt",
            "value": 1.5,
            "visible": true
          }
        ],
        "timeFrom": null,
        "timeRegions": [],
        "timeShift": null,
        "title": "Metric writes per second",
        "tooltip": {
          "shared": true,
          "sort": 0,
          "value_type": "individual"
        },
        "type": "graph",
        "xaxis": {
          "buckets": null,
          "mode": "time",
          "name": null,
          "show": true,
          "values": []
        },
        "yaxes": [
          {
            "format": "short",
            "label": null,
            "logBase": 1,
            "max": null,
            "min": "0",
            "show": true
          },
          {
            "format": "short",
            "label": null,
            "logBase": 1,
            "max": null,
            "min": null,
            "show": true
          }
        ],
        "yaxis": {
          "align": false,
          "alignLevel": null
        }
      },
      {
        "datasource": null,
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": null,
              "displayMode": "color-background",
              "filterable": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "rgb(0, 0, 0)",
                  "value": null
                }
              ]
            }
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "Data Lateness"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 108
                },
                {
                  "id": "unit",
                  "value": "percentunit"
                },
                {
                  "id": "thresholds",
                  "value": {
                    "mode": "absolute",
                    "steps": [
                      {
                        "color": "green",
                        "value": null
                      },
                      {
                        "color": "yellow",
                        "value": 1
                      },
                      {
                        "color": "red",
                        "value": 2
                      }
                    ]
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Sensor Address"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 115
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "InfluxDB Host"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 112
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "InfluxDB Port"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 103
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "InfluxDB Bucket"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 115
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "InfluxDB Org"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 98
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Push Interval"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 97
                },
                {
                  "id": "unit",
                  "value": "ms"
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "Sensor Group"
              },
              "properties": [
                {
                  "id": "custom.filterable",
                  "value": true
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 11,
          "w": 12,
          "x": 12,
          "y": 8
        },
        "id": 10,
        "options": {
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "7.4.2",
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "$__interval"
                ],
                "type": "time"
              },
              {
                "params": [
                  "null"
                ],
                "type": "fill"
              }
            ],
            "orderByTime": "ASC",
            "policy": "default",
            "query": "import \"experimental\"\n\nsensorConfigs = from(bucket: \"iot\")\n  |> range(start: -365d, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"sensor_config\")\n  |> pivot(\n    rowKey:[\"_time\"],\n    columnKey: [\"_field\"],\n    valueColumn: \"_value\"\n  )\n  |> group(columns: [\"sensor_group\"])\n  |> top(n:1, columns: [\"_time\"])\n  |> map(fn: (r) => ({r with expected_data_push: experimental.subDuration(d: duration(v: r.push_interval * 1000000), from: v.timeRangeStop)}))\n  |> drop(columns: [\"_time\", \"_start\", \"_stop\", \"_measurement\"])\n\nlatestPushes = from(bucket: \"iot\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"sensor_status\")\n  |> group(columns: [\"sensor_group\"])\n  |> top(n:1, columns: [\"_time\"])\n  |> keep(columns: [\"_time\", \"sensor_group\"])\n  |> rename(columns: {_time: \"last_data_push\"})\n\n\njoin(tables: {d1: sensorConfigs, d2: latestPushes}, on: [\"sensor_group\"], method: \"inner\")\n  |>  map(fn: (r) => ({r with data_lateness: float(v: int(v: experimental.subDuration(d: duration(v: int(v:r.last_data_push)), from: v.timeRangeStop))) / float(v: r.push_interval) / float(v: 1000000)}))\n  |>  map(fn: (r) => ({r with influx_host: r.influx_host + \":\" + r.influx_port}))",
            "refId": "A",
            "resultFormat": "time_series",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "mean"
                }
              ]
            ],
            "tags": []
          }
        ],
        "title": "Active Sensors",
        "transformations": [
          {
            "id": "labelsToFields",
            "options": {}
          },
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "expected_data_push": true,
                "influx_port": true,
                "last_data_push": true
              },
              "indexByName": {
                "data_lateness": 1,
                "expected_data_push": 3,
                "influx_bucket": 6,
                "influx_host": 4,
                "influx_org": 7,
                "influx_port": 5,
                "last_data_push": 9,
                "push_interval": 8,
                "sensor_address": 2,
                "sensor_group": 0
              },
              "renameByName": {
                "data_lateness": "Data Lateness",
                "influx_bucket": "InfluxDB Bucket",
                "influx_host": "InfluxDB Host",
                "influx_org": "InfluxDB Org",
                "influx_port": "InfluxDB Port",
                "push_interval": "Push Interval",
                "sensor_address": "Sensor Address",
                "sensor_group": "Sensor Group"
              }
            }
          }
        ],
        "type": "table"
      }
    ],
    "refresh": "5s",
    "schemaVersion": 27,
    "style": "dark",
    "tags": [],
    "templating": {
      "list": []
    },
    "time": {
      "from": "now-15m",
      "to": "now"
    },
    "timepicker": {},
    "timezone": "",
    "title": "System Maintenance",
    "version": 20
  },
  "folderId": 0,
  "overwrite": false
}